#include "STM32G474xx"



void USART1_Init() {
    // Enable the USART1 and GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;

    // Configure PA9 (TX) as alternate function output push-pull
    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
    GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1;

    // Configure PA10 (RX) as floating input
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
    GPIOA->CRH |= GPIO_CRH_CNF10_0;

    // Configure USART1
    USART1->CR1 &= ~USART_CR1_UE; // Disable USART1
    USART1->BRR = 0x1D4C;  // 9600 baud @ 72MHz PCLK
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;  // Enable transmitter, receiver, and USART
}

void USART1_SendChar(char c) {
    while (!(USART1->SR & USART_SR_TXE));  // Wait until TXE flag is set
    USART1->DR = c;  // Send the character
}

char USART1_ReceiveChar() {
    while (!(USART1->SR & USART_SR_RXNE));  // Wait until RXNE flag is set
    return USART1->DR;  // Read the received character
}

void controlLED(char command) {
    // Assuming the LED is connected to GPIOC Pin 13
    if (command == '1') {
        GPIOC->BSRR = GPIO_BSRR_BS13;  // Set PC13 (turn on LED)
    } else if (command == '0') {
        GPIOC->BSRR = GPIO_BSRR_BR13;  // Reset PC13 (turn off LED)
    }
}

int main(void) {
    // Enable the GPIOC clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;

    // Configure PC13 as output for the LED
    GPIOC->CRH &= ~GPIO_CRH_CNF13;
    GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode, max speed 10 MHz

    USART1_Init();

    while (1) {
        char receivedData = USART1_ReceiveChar();
        controlLED(receivedData);
    }
}
